// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/goto/guardian/domain"

	mock "github.com/stretchr/testify/mock"
)

// AppealService is an autogenerated mock type for the appealService type
type AppealService struct {
	mock.Mock
}

type AppealService_Expecter struct {
	mock *mock.Mock
}

func (_m *AppealService) EXPECT() *AppealService_Expecter {
	return &AppealService_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, filters
func (_m *AppealService) Find(ctx context.Context, filters *domain.ListAppealsFilter) ([]*domain.Appeal, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []*domain.Appeal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListAppealsFilter) ([]*domain.Appeal, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListAppealsFilter) []*domain.Appeal); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Appeal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListAppealsFilter) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type AppealService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filters *domain.ListAppealsFilter
func (_e *AppealService_Expecter) Find(ctx interface{}, filters interface{}) *AppealService_Find_Call {
	return &AppealService_Find_Call{Call: _e.mock.On("Find", ctx, filters)}
}

func (_c *AppealService_Find_Call) Run(run func(ctx context.Context, filters *domain.ListAppealsFilter)) *AppealService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListAppealsFilter))
	})
	return _c
}

func (_c *AppealService_Find_Call) Return(_a0 []*domain.Appeal, _a1 error) *AppealService_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_Find_Call) RunAndReturn(run func(context.Context, *domain.ListAppealsFilter) ([]*domain.Appeal, error)) *AppealService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppealService creates a new instance of AppealService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppealService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppealService {
	mock := &AppealService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
