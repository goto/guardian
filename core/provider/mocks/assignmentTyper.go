// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AssignmentTyper is an autogenerated mock type for the assignmentTyper type
type AssignmentTyper struct {
	mock.Mock
}

type AssignmentTyper_Expecter struct {
	mock *mock.Mock
}

func (_m *AssignmentTyper) EXPECT() *AssignmentTyper_Expecter {
	return &AssignmentTyper_Expecter{mock: &_m.Mock}
}

// IsExclusiveRoleAssignment provides a mock function with given fields: _a0
func (_m *AssignmentTyper) IsExclusiveRoleAssignment(_a0 context.Context) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AssignmentTyper_IsExclusiveRoleAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExclusiveRoleAssignment'
type AssignmentTyper_IsExclusiveRoleAssignment_Call struct {
	*mock.Call
}

// IsExclusiveRoleAssignment is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AssignmentTyper_Expecter) IsExclusiveRoleAssignment(_a0 interface{}) *AssignmentTyper_IsExclusiveRoleAssignment_Call {
	return &AssignmentTyper_IsExclusiveRoleAssignment_Call{Call: _e.mock.On("IsExclusiveRoleAssignment", _a0)}
}

func (_c *AssignmentTyper_IsExclusiveRoleAssignment_Call) Run(run func(_a0 context.Context)) *AssignmentTyper_IsExclusiveRoleAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AssignmentTyper_IsExclusiveRoleAssignment_Call) Return(_a0 bool) *AssignmentTyper_IsExclusiveRoleAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssignmentTyper_IsExclusiveRoleAssignment_Call) RunAndReturn(run func(context.Context) bool) *AssignmentTyper_IsExclusiveRoleAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssignmentTyper creates a new instance of AssignmentTyper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssignmentTyper(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssignmentTyper {
	mock := &AssignmentTyper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
