// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IAMClient is an autogenerated mock type for the IAMClient type
type IAMClient struct {
	mock.Mock
}

type IAMClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IAMClient) EXPECT() *IAMClient_Expecter {
	return &IAMClient_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: id
func (_m *IAMClient) GetUser(id string) (interface{}, error) {
	ret := _m.Called(id)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAMClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type IAMClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id string
func (_e *IAMClient_Expecter) GetUser(id interface{}) *IAMClient_GetUser_Call {
	return &IAMClient_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *IAMClient_GetUser_Call) Run(run func(id string)) *IAMClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IAMClient_GetUser_Call) Return(_a0 interface{}, _a1 error) *IAMClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAMClient_GetUser_Call) RunAndReturn(run func(string) (interface{}, error)) *IAMClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAMClient creates a new instance of IAMClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAMClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAMClient {
	mock := &IAMClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
