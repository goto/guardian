// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appeal "github.com/goto/guardian/core/appeal"

	domain "github.com/goto/guardian/domain"

	mock "github.com/stretchr/testify/mock"
)

// AppealService is an autogenerated mock type for the appealService type
type AppealService struct {
	mock.Mock
}

type AppealService_Expecter struct {
	mock *mock.Mock
}

func (_m *AppealService) EXPECT() *AppealService_Expecter {
	return &AppealService_Expecter{mock: &_m.Mock}
}

// AddApprover provides a mock function with given fields: ctx, appealID, approvalID, email
func (_m *AppealService) AddApprover(ctx context.Context, appealID string, approvalID string, email string) (*domain.Appeal, error) {
	ret := _m.Called(ctx, appealID, approvalID, email)

	var r0 *domain.Appeal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.Appeal, error)); ok {
		return rf(ctx, appealID, approvalID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Appeal); ok {
		r0 = rf(ctx, appealID, approvalID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, appealID, approvalID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_AddApprover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddApprover'
type AppealService_AddApprover_Call struct {
	*mock.Call
}

// AddApprover is a helper method to define mock.On call
//   - ctx context.Context
//   - appealID string
//   - approvalID string
//   - email string
func (_e *AppealService_Expecter) AddApprover(ctx interface{}, appealID interface{}, approvalID interface{}, email interface{}) *AppealService_AddApprover_Call {
	return &AppealService_AddApprover_Call{Call: _e.mock.On("AddApprover", ctx, appealID, approvalID, email)}
}

func (_c *AppealService_AddApprover_Call) Run(run func(ctx context.Context, appealID string, approvalID string, email string)) *AppealService_AddApprover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AppealService_AddApprover_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_AddApprover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_AddApprover_Call) RunAndReturn(run func(context.Context, string, string, string) (*domain.Appeal, error)) *AppealService_AddApprover_Call {
	_c.Call.Return(run)
	return _c
}

// Cancel provides a mock function with given fields: _a0, _a1
func (_m *AppealService) Cancel(_a0 context.Context, _a1 string) (*domain.Appeal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Appeal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Appeal, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Appeal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type AppealService_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *AppealService_Expecter) Cancel(_a0 interface{}, _a1 interface{}) *AppealService_Cancel_Call {
	return &AppealService_Cancel_Call{Call: _e.mock.On("Cancel", _a0, _a1)}
}

func (_c *AppealService_Cancel_Call) Run(run func(_a0 context.Context, _a1 string)) *AppealService_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AppealService_Cancel_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_Cancel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_Cancel_Call) RunAndReturn(run func(context.Context, string) (*domain.Appeal, error)) *AppealService_Cancel_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *AppealService) Create(_a0 context.Context, _a1 []*domain.Appeal, _a2 ...appeal.CreateAppealOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Appeal, ...appeal.CreateAppealOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppealService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AppealService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []*domain.Appeal
//   - _a2 ...appeal.CreateAppealOption
func (_e *AppealService_Expecter) Create(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *AppealService_Create_Call {
	return &AppealService_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *AppealService_Create_Call) Run(run func(_a0 context.Context, _a1 []*domain.Appeal, _a2 ...appeal.CreateAppealOption)) *AppealService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]appeal.CreateAppealOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(appeal.CreateAppealOption)
			}
		}
		run(args[0].(context.Context), args[1].([]*domain.Appeal), variadicArgs...)
	})
	return _c
}

func (_c *AppealService_Create_Call) Return(_a0 error) *AppealService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppealService_Create_Call) RunAndReturn(run func(context.Context, []*domain.Appeal, ...appeal.CreateAppealOption) error) *AppealService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComment provides a mock function with given fields: _a0, _a1
func (_m *AppealService) CreateComment(_a0 context.Context, _a1 *domain.Comment) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppealService_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type AppealService_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domain.Comment
func (_e *AppealService_Expecter) CreateComment(_a0 interface{}, _a1 interface{}) *AppealService_CreateComment_Call {
	return &AppealService_CreateComment_Call{Call: _e.mock.On("CreateComment", _a0, _a1)}
}

func (_c *AppealService_CreateComment_Call) Run(run func(_a0 context.Context, _a1 *domain.Comment)) *AppealService_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Comment))
	})
	return _c
}

func (_c *AppealService_CreateComment_Call) Return(_a0 error) *AppealService_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppealService_CreateComment_Call) RunAndReturn(run func(context.Context, *domain.Comment) error) *AppealService_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApprover provides a mock function with given fields: ctx, appealID, approvalID, email
func (_m *AppealService) DeleteApprover(ctx context.Context, appealID string, approvalID string, email string) (*domain.Appeal, error) {
	ret := _m.Called(ctx, appealID, approvalID, email)

	var r0 *domain.Appeal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.Appeal, error)); ok {
		return rf(ctx, appealID, approvalID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Appeal); ok {
		r0 = rf(ctx, appealID, approvalID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, appealID, approvalID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_DeleteApprover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApprover'
type AppealService_DeleteApprover_Call struct {
	*mock.Call
}

// DeleteApprover is a helper method to define mock.On call
//   - ctx context.Context
//   - appealID string
//   - approvalID string
//   - email string
func (_e *AppealService_Expecter) DeleteApprover(ctx interface{}, appealID interface{}, approvalID interface{}, email interface{}) *AppealService_DeleteApprover_Call {
	return &AppealService_DeleteApprover_Call{Call: _e.mock.On("DeleteApprover", ctx, appealID, approvalID, email)}
}

func (_c *AppealService_DeleteApprover_Call) Run(run func(ctx context.Context, appealID string, approvalID string, email string)) *AppealService_DeleteApprover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AppealService_DeleteApprover_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_DeleteApprover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_DeleteApprover_Call) RunAndReturn(run func(context.Context, string, string, string) (*domain.Appeal, error)) *AppealService_DeleteApprover_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *AppealService) Find(_a0 context.Context, _a1 *domain.ListAppealsFilter) ([]*domain.Appeal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*domain.Appeal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListAppealsFilter) ([]*domain.Appeal, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListAppealsFilter) []*domain.Appeal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Appeal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListAppealsFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type AppealService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domain.ListAppealsFilter
func (_e *AppealService_Expecter) Find(_a0 interface{}, _a1 interface{}) *AppealService_Find_Call {
	return &AppealService_Find_Call{Call: _e.mock.On("Find", _a0, _a1)}
}

func (_c *AppealService_Find_Call) Run(run func(_a0 context.Context, _a1 *domain.ListAppealsFilter)) *AppealService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListAppealsFilter))
	})
	return _c
}

func (_c *AppealService_Find_Call) Return(_a0 []*domain.Appeal, _a1 error) *AppealService_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_Find_Call) RunAndReturn(run func(context.Context, *domain.ListAppealsFilter) ([]*domain.Appeal, error)) *AppealService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppealsTotalCount provides a mock function with given fields: _a0, _a1
func (_m *AppealService) GetAppealsTotalCount(_a0 context.Context, _a1 *domain.ListAppealsFilter) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListAppealsFilter) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ListAppealsFilter) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.ListAppealsFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_GetAppealsTotalCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppealsTotalCount'
type AppealService_GetAppealsTotalCount_Call struct {
	*mock.Call
}

// GetAppealsTotalCount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domain.ListAppealsFilter
func (_e *AppealService_Expecter) GetAppealsTotalCount(_a0 interface{}, _a1 interface{}) *AppealService_GetAppealsTotalCount_Call {
	return &AppealService_GetAppealsTotalCount_Call{Call: _e.mock.On("GetAppealsTotalCount", _a0, _a1)}
}

func (_c *AppealService_GetAppealsTotalCount_Call) Run(run func(_a0 context.Context, _a1 *domain.ListAppealsFilter)) *AppealService_GetAppealsTotalCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ListAppealsFilter))
	})
	return _c
}

func (_c *AppealService_GetAppealsTotalCount_Call) Return(_a0 int64, _a1 error) *AppealService_GetAppealsTotalCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_GetAppealsTotalCount_Call) RunAndReturn(run func(context.Context, *domain.ListAppealsFilter) (int64, error)) *AppealService_GetAppealsTotalCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *AppealService) GetByID(_a0 context.Context, _a1 string) (*domain.Appeal, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Appeal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Appeal, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Appeal); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type AppealService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *AppealService_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *AppealService_GetByID_Call {
	return &AppealService_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *AppealService_GetByID_Call) Run(run func(_a0 context.Context, _a1 string)) *AppealService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AppealService_GetByID_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_GetByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Appeal, error)) *AppealService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListActivities provides a mock function with given fields: _a0, _a1
func (_m *AppealService) ListActivities(_a0 context.Context, _a1 string) ([]*domain.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Event, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_ListActivities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActivities'
type AppealService_ListActivities_Call struct {
	*mock.Call
}

// ListActivities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *AppealService_Expecter) ListActivities(_a0 interface{}, _a1 interface{}) *AppealService_ListActivities_Call {
	return &AppealService_ListActivities_Call{Call: _e.mock.On("ListActivities", _a0, _a1)}
}

func (_c *AppealService_ListActivities_Call) Run(run func(_a0 context.Context, _a1 string)) *AppealService_ListActivities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AppealService_ListActivities_Call) Return(_a0 []*domain.Event, _a1 error) *AppealService_ListActivities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_ListActivities_Call) RunAndReturn(run func(context.Context, string) ([]*domain.Event, error)) *AppealService_ListActivities_Call {
	_c.Call.Return(run)
	return _c
}

// ListComments provides a mock function with given fields: _a0, _a1
func (_m *AppealService) ListComments(_a0 context.Context, _a1 domain.ListCommentsFilter) ([]*domain.Comment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListCommentsFilter) ([]*domain.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListCommentsFilter) []*domain.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListCommentsFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_ListComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListComments'
type AppealService_ListComments_Call struct {
	*mock.Call
}

// ListComments is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.ListCommentsFilter
func (_e *AppealService_Expecter) ListComments(_a0 interface{}, _a1 interface{}) *AppealService_ListComments_Call {
	return &AppealService_ListComments_Call{Call: _e.mock.On("ListComments", _a0, _a1)}
}

func (_c *AppealService_ListComments_Call) Run(run func(_a0 context.Context, _a1 domain.ListCommentsFilter)) *AppealService_ListComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListCommentsFilter))
	})
	return _c
}

func (_c *AppealService_ListComments_Call) Return(_a0 []*domain.Comment, _a1 error) *AppealService_ListComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_ListComments_Call) RunAndReturn(run func(context.Context, domain.ListCommentsFilter) ([]*domain.Comment, error)) *AppealService_ListComments_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: _a0, _a1
func (_m *AppealService) Patch(_a0 context.Context, _a1 *domain.Appeal) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Appeal) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppealService_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type AppealService_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domain.Appeal
func (_e *AppealService_Expecter) Patch(_a0 interface{}, _a1 interface{}) *AppealService_Patch_Call {
	return &AppealService_Patch_Call{Call: _e.mock.On("Patch", _a0, _a1)}
}

func (_c *AppealService_Patch_Call) Run(run func(_a0 context.Context, _a1 *domain.Appeal)) *AppealService_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Appeal))
	})
	return _c
}

func (_c *AppealService_Patch_Call) Return(_a0 error) *AppealService_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppealService_Patch_Call) RunAndReturn(run func(context.Context, *domain.Appeal) error) *AppealService_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApproval provides a mock function with given fields: ctx, approvalAction
func (_m *AppealService) UpdateApproval(ctx context.Context, approvalAction domain.ApprovalAction) (*domain.Appeal, error) {
	ret := _m.Called(ctx, approvalAction)

	var r0 *domain.Appeal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ApprovalAction) (*domain.Appeal, error)); ok {
		return rf(ctx, approvalAction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ApprovalAction) *domain.Appeal); ok {
		r0 = rf(ctx, approvalAction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appeal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ApprovalAction) error); ok {
		r1 = rf(ctx, approvalAction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppealService_UpdateApproval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApproval'
type AppealService_UpdateApproval_Call struct {
	*mock.Call
}

// UpdateApproval is a helper method to define mock.On call
//   - ctx context.Context
//   - approvalAction domain.ApprovalAction
func (_e *AppealService_Expecter) UpdateApproval(ctx interface{}, approvalAction interface{}) *AppealService_UpdateApproval_Call {
	return &AppealService_UpdateApproval_Call{Call: _e.mock.On("UpdateApproval", ctx, approvalAction)}
}

func (_c *AppealService_UpdateApproval_Call) Run(run func(ctx context.Context, approvalAction domain.ApprovalAction)) *AppealService_UpdateApproval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ApprovalAction))
	})
	return _c
}

func (_c *AppealService_UpdateApproval_Call) Return(_a0 *domain.Appeal, _a1 error) *AppealService_UpdateApproval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppealService_UpdateApproval_Call) RunAndReturn(run func(context.Context, domain.ApprovalAction) (*domain.Appeal, error)) *AppealService_UpdateApproval_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppealService creates a new instance of AppealService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppealService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppealService {
	mock := &AppealService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
