// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	metabase "github.com/goto/guardian/plugins/providers/metabase"
	mock "github.com/stretchr/testify/mock"
)

// MetabaseClient is an autogenerated mock type for the MetabaseClient type
type MetabaseClient struct {
	mock.Mock
}

// GetCollections provides a mock function with given fields: ctx
func (_m *MetabaseClient) GetCollections(ctx context.Context) ([]*metabase.Collection, error) {
	ret := _m.Called(ctx)

	var r0 []*metabase.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*metabase.Collection, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*metabase.Collection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metabase.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabases provides a mock function with given fields: ctx
func (_m *MetabaseClient) GetDatabases(ctx context.Context) ([]*metabase.Database, error) {
	ret := _m.Called(ctx)

	var r0 []*metabase.Database
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*metabase.Database, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*metabase.Database); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metabase.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields: ctx
func (_m *MetabaseClient) GetGroups(ctx context.Context) ([]*metabase.Group, metabase.ResourceGroupDetails, metabase.ResourceGroupDetails, error) {
	ret := _m.Called(ctx)

	var r0 []*metabase.Group
	var r1 metabase.ResourceGroupDetails
	var r2 metabase.ResourceGroupDetails
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*metabase.Group, metabase.ResourceGroupDetails, metabase.ResourceGroupDetails, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*metabase.Group); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metabase.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) metabase.ResourceGroupDetails); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(metabase.ResourceGroupDetails)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) metabase.ResourceGroupDetails); ok {
		r2 = rf(ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(metabase.ResourceGroupDetails)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(ctx)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GrantCollectionAccess provides a mock function with given fields: ctx, resource, user, role
func (_m *MetabaseClient) GrantCollectionAccess(ctx context.Context, resource *metabase.Collection, user string, role string) error {
	ret := _m.Called(ctx, resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metabase.Collection, string, string) error); ok {
		r0 = rf(ctx, resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantDatabaseAccess provides a mock function with given fields: ctx, resource, user, role, groups
func (_m *MetabaseClient) GrantDatabaseAccess(ctx context.Context, resource *metabase.Database, user string, role string, groups map[string]*metabase.Group) error {
	ret := _m.Called(ctx, resource, user, role, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metabase.Database, string, string, map[string]*metabase.Group) error); ok {
		r0 = rf(ctx, resource, user, role, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantGroupAccess provides a mock function with given fields: ctx, groupID, email
func (_m *MetabaseClient) GrantGroupAccess(ctx context.Context, groupID int, email string) error {
	ret := _m.Called(ctx, groupID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, groupID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantTableAccess provides a mock function with given fields: ctx, resource, user, role, groups
func (_m *MetabaseClient) GrantTableAccess(ctx context.Context, resource *metabase.Table, user string, role string, groups map[string]*metabase.Group) error {
	ret := _m.Called(ctx, resource, user, role, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metabase.Table, string, string, map[string]*metabase.Group) error); ok {
		r0 = rf(ctx, resource, user, role, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeCollectionAccess provides a mock function with given fields: ctx, resource, user, role
func (_m *MetabaseClient) RevokeCollectionAccess(ctx context.Context, resource *metabase.Collection, user string, role string) error {
	ret := _m.Called(ctx, resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metabase.Collection, string, string) error); ok {
		r0 = rf(ctx, resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeDatabaseAccess provides a mock function with given fields: ctx, resource, user, role
func (_m *MetabaseClient) RevokeDatabaseAccess(ctx context.Context, resource *metabase.Database, user string, role string) error {
	ret := _m.Called(ctx, resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metabase.Database, string, string) error); ok {
		r0 = rf(ctx, resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeGroupAccess provides a mock function with given fields: ctx, groupID, email
func (_m *MetabaseClient) RevokeGroupAccess(ctx context.Context, groupID int, email string) error {
	ret := _m.Called(ctx, groupID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, groupID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeTableAccess provides a mock function with given fields: ctx, resource, user, role
func (_m *MetabaseClient) RevokeTableAccess(ctx context.Context, resource *metabase.Table, user string, role string) error {
	ret := _m.Called(ctx, resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metabase.Table, string, string) error); ok {
		r0 = rf(ctx, resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMetabaseClient creates a new instance of MetabaseClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetabaseClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetabaseClient {
	mock := &MetabaseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
