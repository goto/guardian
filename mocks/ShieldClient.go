// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	shield "github.com/goto/guardian/plugins/providers/shield"
	mock "github.com/stretchr/testify/mock"
)

// ShieldClient is an autogenerated mock type for the ShieldClient type
type ShieldClient struct {
	mock.Mock
}

type ShieldClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ShieldClient) EXPECT() *ShieldClient_Expecter {
	return &ShieldClient_Expecter{mock: &_m.Mock}
}

// GetGroups provides a mock function with given fields: ctx
func (_m *ShieldClient) GetGroups(ctx context.Context) ([]*shield.Group, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []*shield.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*shield.Group, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*shield.Group); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*shield.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShieldClient_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type ShieldClient_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ShieldClient_Expecter) GetGroups(ctx interface{}) *ShieldClient_GetGroups_Call {
	return &ShieldClient_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx)}
}

func (_c *ShieldClient_GetGroups_Call) Run(run func(ctx context.Context)) *ShieldClient_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ShieldClient_GetGroups_Call) Return(_a0 []*shield.Group, _a1 error) *ShieldClient_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShieldClient_GetGroups_Call) RunAndReturn(run func(context.Context) ([]*shield.Group, error)) *ShieldClient_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespaces provides a mock function with given fields: ctx
func (_m *ShieldClient) GetNamespaces(ctx context.Context) ([]*shield.Namespace, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespaces")
	}

	var r0 []*shield.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*shield.Namespace, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*shield.Namespace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*shield.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShieldClient_GetNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaces'
type ShieldClient_GetNamespaces_Call struct {
	*mock.Call
}

// GetNamespaces is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ShieldClient_Expecter) GetNamespaces(ctx interface{}) *ShieldClient_GetNamespaces_Call {
	return &ShieldClient_GetNamespaces_Call{Call: _e.mock.On("GetNamespaces", ctx)}
}

func (_c *ShieldClient_GetNamespaces_Call) Run(run func(ctx context.Context)) *ShieldClient_GetNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ShieldClient_GetNamespaces_Call) Return(_a0 []*shield.Namespace, _a1 error) *ShieldClient_GetNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShieldClient_GetNamespaces_Call) RunAndReturn(run func(context.Context) ([]*shield.Namespace, error)) *ShieldClient_GetNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizations provides a mock function with given fields: ctx
func (_m *ShieldClient) GetOrganizations(ctx context.Context) ([]*shield.Organization, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizations")
	}

	var r0 []*shield.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*shield.Organization, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*shield.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*shield.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShieldClient_GetOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizations'
type ShieldClient_GetOrganizations_Call struct {
	*mock.Call
}

// GetOrganizations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ShieldClient_Expecter) GetOrganizations(ctx interface{}) *ShieldClient_GetOrganizations_Call {
	return &ShieldClient_GetOrganizations_Call{Call: _e.mock.On("GetOrganizations", ctx)}
}

func (_c *ShieldClient_GetOrganizations_Call) Run(run func(ctx context.Context)) *ShieldClient_GetOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ShieldClient_GetOrganizations_Call) Return(_a0 []*shield.Organization, _a1 error) *ShieldClient_GetOrganizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShieldClient_GetOrganizations_Call) RunAndReturn(run func(context.Context) ([]*shield.Organization, error)) *ShieldClient_GetOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx
func (_m *ShieldClient) GetProjects(ctx context.Context) ([]*shield.Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 []*shield.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*shield.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*shield.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*shield.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShieldClient_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type ShieldClient_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ShieldClient_Expecter) GetProjects(ctx interface{}) *ShieldClient_GetProjects_Call {
	return &ShieldClient_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx)}
}

func (_c *ShieldClient_GetProjects_Call) Run(run func(ctx context.Context)) *ShieldClient_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ShieldClient_GetProjects_Call) Return(_a0 []*shield.Project, _a1 error) *ShieldClient_GetProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShieldClient_GetProjects_Call) RunAndReturn(run func(context.Context) ([]*shield.Project, error)) *ShieldClient_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function with given fields: ctx, namespace
func (_m *ShieldClient) GetResources(ctx context.Context, namespace string) ([]*shield.Resource, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 []*shield.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*shield.Resource, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*shield.Resource); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*shield.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShieldClient_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type ShieldClient_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
func (_e *ShieldClient_Expecter) GetResources(ctx interface{}, namespace interface{}) *ShieldClient_GetResources_Call {
	return &ShieldClient_GetResources_Call{Call: _e.mock.On("GetResources", ctx, namespace)}
}

func (_c *ShieldClient_GetResources_Call) Run(run func(ctx context.Context, namespace string)) *ShieldClient_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ShieldClient_GetResources_Call) Return(_a0 []*shield.Resource, _a1 error) *ShieldClient_GetResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShieldClient_GetResources_Call) RunAndReturn(run func(context.Context, string) ([]*shield.Resource, error)) *ShieldClient_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelfUser provides a mock function with given fields: ctx, email
func (_m *ShieldClient) GetSelfUser(ctx context.Context, email string) (*shield.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetSelfUser")
	}

	var r0 *shield.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*shield.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *shield.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShieldClient_GetSelfUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelfUser'
type ShieldClient_GetSelfUser_Call struct {
	*mock.Call
}

// GetSelfUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *ShieldClient_Expecter) GetSelfUser(ctx interface{}, email interface{}) *ShieldClient_GetSelfUser_Call {
	return &ShieldClient_GetSelfUser_Call{Call: _e.mock.On("GetSelfUser", ctx, email)}
}

func (_c *ShieldClient_GetSelfUser_Call) Run(run func(ctx context.Context, email string)) *ShieldClient_GetSelfUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ShieldClient_GetSelfUser_Call) Return(_a0 *shield.User, _a1 error) *ShieldClient_GetSelfUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShieldClient_GetSelfUser_Call) RunAndReturn(run func(context.Context, string) (*shield.User, error)) *ShieldClient_GetSelfUser_Call {
	_c.Call.Return(run)
	return _c
}

// GrantGroupAccess provides a mock function with given fields: ctx, team, userId, role
func (_m *ShieldClient) GrantGroupAccess(ctx context.Context, team *shield.Group, userId string, role string) error {
	ret := _m.Called(ctx, team, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for GrantGroupAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Group, string, string) error); ok {
		r0 = rf(ctx, team, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_GrantGroupAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantGroupAccess'
type ShieldClient_GrantGroupAccess_Call struct {
	*mock.Call
}

// GrantGroupAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - team *shield.Group
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) GrantGroupAccess(ctx interface{}, team interface{}, userId interface{}, role interface{}) *ShieldClient_GrantGroupAccess_Call {
	return &ShieldClient_GrantGroupAccess_Call{Call: _e.mock.On("GrantGroupAccess", ctx, team, userId, role)}
}

func (_c *ShieldClient_GrantGroupAccess_Call) Run(run func(ctx context.Context, team *shield.Group, userId string, role string)) *ShieldClient_GrantGroupAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Group), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_GrantGroupAccess_Call) Return(_a0 error) *ShieldClient_GrantGroupAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_GrantGroupAccess_Call) RunAndReturn(run func(context.Context, *shield.Group, string, string) error) *ShieldClient_GrantGroupAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantOrganizationAccess provides a mock function with given fields: ctx, organization, userId, role
func (_m *ShieldClient) GrantOrganizationAccess(ctx context.Context, organization *shield.Organization, userId string, role string) error {
	ret := _m.Called(ctx, organization, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for GrantOrganizationAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Organization, string, string) error); ok {
		r0 = rf(ctx, organization, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_GrantOrganizationAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantOrganizationAccess'
type ShieldClient_GrantOrganizationAccess_Call struct {
	*mock.Call
}

// GrantOrganizationAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - organization *shield.Organization
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) GrantOrganizationAccess(ctx interface{}, organization interface{}, userId interface{}, role interface{}) *ShieldClient_GrantOrganizationAccess_Call {
	return &ShieldClient_GrantOrganizationAccess_Call{Call: _e.mock.On("GrantOrganizationAccess", ctx, organization, userId, role)}
}

func (_c *ShieldClient_GrantOrganizationAccess_Call) Run(run func(ctx context.Context, organization *shield.Organization, userId string, role string)) *ShieldClient_GrantOrganizationAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Organization), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_GrantOrganizationAccess_Call) Return(_a0 error) *ShieldClient_GrantOrganizationAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_GrantOrganizationAccess_Call) RunAndReturn(run func(context.Context, *shield.Organization, string, string) error) *ShieldClient_GrantOrganizationAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantProjectAccess provides a mock function with given fields: ctx, project, userId, role
func (_m *ShieldClient) GrantProjectAccess(ctx context.Context, project *shield.Project, userId string, role string) error {
	ret := _m.Called(ctx, project, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for GrantProjectAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Project, string, string) error); ok {
		r0 = rf(ctx, project, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_GrantProjectAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantProjectAccess'
type ShieldClient_GrantProjectAccess_Call struct {
	*mock.Call
}

// GrantProjectAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - project *shield.Project
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) GrantProjectAccess(ctx interface{}, project interface{}, userId interface{}, role interface{}) *ShieldClient_GrantProjectAccess_Call {
	return &ShieldClient_GrantProjectAccess_Call{Call: _e.mock.On("GrantProjectAccess", ctx, project, userId, role)}
}

func (_c *ShieldClient_GrantProjectAccess_Call) Run(run func(ctx context.Context, project *shield.Project, userId string, role string)) *ShieldClient_GrantProjectAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Project), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_GrantProjectAccess_Call) Return(_a0 error) *ShieldClient_GrantProjectAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_GrantProjectAccess_Call) RunAndReturn(run func(context.Context, *shield.Project, string, string) error) *ShieldClient_GrantProjectAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantResourceAccess provides a mock function with given fields: ctx, resource, userId, role
func (_m *ShieldClient) GrantResourceAccess(ctx context.Context, resource *shield.Resource, userId string, role string) error {
	ret := _m.Called(ctx, resource, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for GrantResourceAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Resource, string, string) error); ok {
		r0 = rf(ctx, resource, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_GrantResourceAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantResourceAccess'
type ShieldClient_GrantResourceAccess_Call struct {
	*mock.Call
}

// GrantResourceAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - resource *shield.Resource
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) GrantResourceAccess(ctx interface{}, resource interface{}, userId interface{}, role interface{}) *ShieldClient_GrantResourceAccess_Call {
	return &ShieldClient_GrantResourceAccess_Call{Call: _e.mock.On("GrantResourceAccess", ctx, resource, userId, role)}
}

func (_c *ShieldClient_GrantResourceAccess_Call) Run(run func(ctx context.Context, resource *shield.Resource, userId string, role string)) *ShieldClient_GrantResourceAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Resource), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_GrantResourceAccess_Call) Return(_a0 error) *ShieldClient_GrantResourceAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_GrantResourceAccess_Call) RunAndReturn(run func(context.Context, *shield.Resource, string, string) error) *ShieldClient_GrantResourceAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeGroupAccess provides a mock function with given fields: ctx, team, userId, role
func (_m *ShieldClient) RevokeGroupAccess(ctx context.Context, team *shield.Group, userId string, role string) error {
	ret := _m.Called(ctx, team, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for RevokeGroupAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Group, string, string) error); ok {
		r0 = rf(ctx, team, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_RevokeGroupAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeGroupAccess'
type ShieldClient_RevokeGroupAccess_Call struct {
	*mock.Call
}

// RevokeGroupAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - team *shield.Group
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) RevokeGroupAccess(ctx interface{}, team interface{}, userId interface{}, role interface{}) *ShieldClient_RevokeGroupAccess_Call {
	return &ShieldClient_RevokeGroupAccess_Call{Call: _e.mock.On("RevokeGroupAccess", ctx, team, userId, role)}
}

func (_c *ShieldClient_RevokeGroupAccess_Call) Run(run func(ctx context.Context, team *shield.Group, userId string, role string)) *ShieldClient_RevokeGroupAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Group), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_RevokeGroupAccess_Call) Return(_a0 error) *ShieldClient_RevokeGroupAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_RevokeGroupAccess_Call) RunAndReturn(run func(context.Context, *shield.Group, string, string) error) *ShieldClient_RevokeGroupAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeOrganizationAccess provides a mock function with given fields: ctx, organization, userId, role
func (_m *ShieldClient) RevokeOrganizationAccess(ctx context.Context, organization *shield.Organization, userId string, role string) error {
	ret := _m.Called(ctx, organization, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for RevokeOrganizationAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Organization, string, string) error); ok {
		r0 = rf(ctx, organization, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_RevokeOrganizationAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeOrganizationAccess'
type ShieldClient_RevokeOrganizationAccess_Call struct {
	*mock.Call
}

// RevokeOrganizationAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - organization *shield.Organization
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) RevokeOrganizationAccess(ctx interface{}, organization interface{}, userId interface{}, role interface{}) *ShieldClient_RevokeOrganizationAccess_Call {
	return &ShieldClient_RevokeOrganizationAccess_Call{Call: _e.mock.On("RevokeOrganizationAccess", ctx, organization, userId, role)}
}

func (_c *ShieldClient_RevokeOrganizationAccess_Call) Run(run func(ctx context.Context, organization *shield.Organization, userId string, role string)) *ShieldClient_RevokeOrganizationAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Organization), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_RevokeOrganizationAccess_Call) Return(_a0 error) *ShieldClient_RevokeOrganizationAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_RevokeOrganizationAccess_Call) RunAndReturn(run func(context.Context, *shield.Organization, string, string) error) *ShieldClient_RevokeOrganizationAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeProjectAccess provides a mock function with given fields: ctx, project, userId, role
func (_m *ShieldClient) RevokeProjectAccess(ctx context.Context, project *shield.Project, userId string, role string) error {
	ret := _m.Called(ctx, project, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for RevokeProjectAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Project, string, string) error); ok {
		r0 = rf(ctx, project, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_RevokeProjectAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeProjectAccess'
type ShieldClient_RevokeProjectAccess_Call struct {
	*mock.Call
}

// RevokeProjectAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - project *shield.Project
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) RevokeProjectAccess(ctx interface{}, project interface{}, userId interface{}, role interface{}) *ShieldClient_RevokeProjectAccess_Call {
	return &ShieldClient_RevokeProjectAccess_Call{Call: _e.mock.On("RevokeProjectAccess", ctx, project, userId, role)}
}

func (_c *ShieldClient_RevokeProjectAccess_Call) Run(run func(ctx context.Context, project *shield.Project, userId string, role string)) *ShieldClient_RevokeProjectAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Project), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_RevokeProjectAccess_Call) Return(_a0 error) *ShieldClient_RevokeProjectAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_RevokeProjectAccess_Call) RunAndReturn(run func(context.Context, *shield.Project, string, string) error) *ShieldClient_RevokeProjectAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeResourceAccess provides a mock function with given fields: ctx, resource, userId, role
func (_m *ShieldClient) RevokeResourceAccess(ctx context.Context, resource *shield.Resource, userId string, role string) error {
	ret := _m.Called(ctx, resource, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for RevokeResourceAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shield.Resource, string, string) error); ok {
		r0 = rf(ctx, resource, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShieldClient_RevokeResourceAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeResourceAccess'
type ShieldClient_RevokeResourceAccess_Call struct {
	*mock.Call
}

// RevokeResourceAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - resource *shield.Resource
//   - userId string
//   - role string
func (_e *ShieldClient_Expecter) RevokeResourceAccess(ctx interface{}, resource interface{}, userId interface{}, role interface{}) *ShieldClient_RevokeResourceAccess_Call {
	return &ShieldClient_RevokeResourceAccess_Call{Call: _e.mock.On("RevokeResourceAccess", ctx, resource, userId, role)}
}

func (_c *ShieldClient_RevokeResourceAccess_Call) Run(run func(ctx context.Context, resource *shield.Resource, userId string, role string)) *ShieldClient_RevokeResourceAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*shield.Resource), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ShieldClient_RevokeResourceAccess_Call) Return(_a0 error) *ShieldClient_RevokeResourceAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShieldClient_RevokeResourceAccess_Call) RunAndReturn(run func(context.Context, *shield.Resource, string, string) error) *ShieldClient_RevokeResourceAccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewShieldClient creates a new instance of ShieldClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShieldClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShieldClient {
	mock := &ShieldClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
