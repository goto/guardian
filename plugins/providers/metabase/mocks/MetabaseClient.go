// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	metabase "github.com/goto/guardian/plugins/providers/metabase"
	mock "github.com/stretchr/testify/mock"
)

// MetabaseClient is an autogenerated mock type for the MetabaseClient type
type MetabaseClient struct {
	mock.Mock
}

type MetabaseClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MetabaseClient) EXPECT() *MetabaseClient_Expecter {
	return &MetabaseClient_Expecter{mock: &_m.Mock}
}

// GetCollections provides a mock function with given fields:
func (_m *MetabaseClient) GetCollections() ([]*metabase.Collection, error) {
	ret := _m.Called()

	var r0 []*metabase.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*metabase.Collection, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*metabase.Collection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metabase.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetabaseClient_GetCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollections'
type MetabaseClient_GetCollections_Call struct {
	*mock.Call
}

// GetCollections is a helper method to define mock.On call
func (_e *MetabaseClient_Expecter) GetCollections() *MetabaseClient_GetCollections_Call {
	return &MetabaseClient_GetCollections_Call{Call: _e.mock.On("GetCollections")}
}

func (_c *MetabaseClient_GetCollections_Call) Run(run func()) *MetabaseClient_GetCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetabaseClient_GetCollections_Call) Return(_a0 []*metabase.Collection, _a1 error) *MetabaseClient_GetCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetabaseClient_GetCollections_Call) RunAndReturn(run func() ([]*metabase.Collection, error)) *MetabaseClient_GetCollections_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabases provides a mock function with given fields:
func (_m *MetabaseClient) GetDatabases() ([]*metabase.Database, error) {
	ret := _m.Called()

	var r0 []*metabase.Database
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*metabase.Database, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*metabase.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metabase.Database)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetabaseClient_GetDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabases'
type MetabaseClient_GetDatabases_Call struct {
	*mock.Call
}

// GetDatabases is a helper method to define mock.On call
func (_e *MetabaseClient_Expecter) GetDatabases() *MetabaseClient_GetDatabases_Call {
	return &MetabaseClient_GetDatabases_Call{Call: _e.mock.On("GetDatabases")}
}

func (_c *MetabaseClient_GetDatabases_Call) Run(run func()) *MetabaseClient_GetDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetabaseClient_GetDatabases_Call) Return(_a0 []*metabase.Database, _a1 error) *MetabaseClient_GetDatabases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetabaseClient_GetDatabases_Call) RunAndReturn(run func() ([]*metabase.Database, error)) *MetabaseClient_GetDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields:
func (_m *MetabaseClient) GetGroups() ([]*metabase.Group, metabase.ResourceGroupDetails, metabase.ResourceGroupDetails, error) {
	ret := _m.Called()

	var r0 []*metabase.Group
	var r1 metabase.ResourceGroupDetails
	var r2 metabase.ResourceGroupDetails
	var r3 error
	if rf, ok := ret.Get(0).(func() ([]*metabase.Group, metabase.ResourceGroupDetails, metabase.ResourceGroupDetails, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*metabase.Group); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metabase.Group)
		}
	}

	if rf, ok := ret.Get(1).(func() metabase.ResourceGroupDetails); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(metabase.ResourceGroupDetails)
		}
	}

	if rf, ok := ret.Get(2).(func() metabase.ResourceGroupDetails); ok {
		r2 = rf()
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(metabase.ResourceGroupDetails)
		}
	}

	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MetabaseClient_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MetabaseClient_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
func (_e *MetabaseClient_Expecter) GetGroups() *MetabaseClient_GetGroups_Call {
	return &MetabaseClient_GetGroups_Call{Call: _e.mock.On("GetGroups")}
}

func (_c *MetabaseClient_GetGroups_Call) Run(run func()) *MetabaseClient_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetabaseClient_GetGroups_Call) Return(_a0 []*metabase.Group, _a1 metabase.ResourceGroupDetails, _a2 metabase.ResourceGroupDetails, _a3 error) *MetabaseClient_GetGroups_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MetabaseClient_GetGroups_Call) RunAndReturn(run func() ([]*metabase.Group, metabase.ResourceGroupDetails, metabase.ResourceGroupDetails, error)) *MetabaseClient_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GrantCollectionAccess provides a mock function with given fields: resource, user, role
func (_m *MetabaseClient) GrantCollectionAccess(resource *metabase.Collection, user string, role string) error {
	ret := _m.Called(resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metabase.Collection, string, string) error); ok {
		r0 = rf(resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_GrantCollectionAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantCollectionAccess'
type MetabaseClient_GrantCollectionAccess_Call struct {
	*mock.Call
}

// GrantCollectionAccess is a helper method to define mock.On call
//   - resource *metabase.Collection
//   - user string
//   - role string
func (_e *MetabaseClient_Expecter) GrantCollectionAccess(resource interface{}, user interface{}, role interface{}) *MetabaseClient_GrantCollectionAccess_Call {
	return &MetabaseClient_GrantCollectionAccess_Call{Call: _e.mock.On("GrantCollectionAccess", resource, user, role)}
}

func (_c *MetabaseClient_GrantCollectionAccess_Call) Run(run func(resource *metabase.Collection, user string, role string)) *MetabaseClient_GrantCollectionAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metabase.Collection), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MetabaseClient_GrantCollectionAccess_Call) Return(_a0 error) *MetabaseClient_GrantCollectionAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_GrantCollectionAccess_Call) RunAndReturn(run func(*metabase.Collection, string, string) error) *MetabaseClient_GrantCollectionAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantDatabaseAccess provides a mock function with given fields: resource, user, role, groups
func (_m *MetabaseClient) GrantDatabaseAccess(resource *metabase.Database, user string, role string, groups map[string]*metabase.Group) error {
	ret := _m.Called(resource, user, role, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metabase.Database, string, string, map[string]*metabase.Group) error); ok {
		r0 = rf(resource, user, role, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_GrantDatabaseAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantDatabaseAccess'
type MetabaseClient_GrantDatabaseAccess_Call struct {
	*mock.Call
}

// GrantDatabaseAccess is a helper method to define mock.On call
//   - resource *metabase.Database
//   - user string
//   - role string
//   - groups map[string]*metabase.Group
func (_e *MetabaseClient_Expecter) GrantDatabaseAccess(resource interface{}, user interface{}, role interface{}, groups interface{}) *MetabaseClient_GrantDatabaseAccess_Call {
	return &MetabaseClient_GrantDatabaseAccess_Call{Call: _e.mock.On("GrantDatabaseAccess", resource, user, role, groups)}
}

func (_c *MetabaseClient_GrantDatabaseAccess_Call) Run(run func(resource *metabase.Database, user string, role string, groups map[string]*metabase.Group)) *MetabaseClient_GrantDatabaseAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metabase.Database), args[1].(string), args[2].(string), args[3].(map[string]*metabase.Group))
	})
	return _c
}

func (_c *MetabaseClient_GrantDatabaseAccess_Call) Return(_a0 error) *MetabaseClient_GrantDatabaseAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_GrantDatabaseAccess_Call) RunAndReturn(run func(*metabase.Database, string, string, map[string]*metabase.Group) error) *MetabaseClient_GrantDatabaseAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantGroupAccess provides a mock function with given fields: groupID, email
func (_m *MetabaseClient) GrantGroupAccess(groupID int, email string) error {
	ret := _m.Called(groupID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(groupID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_GrantGroupAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantGroupAccess'
type MetabaseClient_GrantGroupAccess_Call struct {
	*mock.Call
}

// GrantGroupAccess is a helper method to define mock.On call
//   - groupID int
//   - email string
func (_e *MetabaseClient_Expecter) GrantGroupAccess(groupID interface{}, email interface{}) *MetabaseClient_GrantGroupAccess_Call {
	return &MetabaseClient_GrantGroupAccess_Call{Call: _e.mock.On("GrantGroupAccess", groupID, email)}
}

func (_c *MetabaseClient_GrantGroupAccess_Call) Run(run func(groupID int, email string)) *MetabaseClient_GrantGroupAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MetabaseClient_GrantGroupAccess_Call) Return(_a0 error) *MetabaseClient_GrantGroupAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_GrantGroupAccess_Call) RunAndReturn(run func(int, string) error) *MetabaseClient_GrantGroupAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantTableAccess provides a mock function with given fields: resource, user, role, groups
func (_m *MetabaseClient) GrantTableAccess(resource *metabase.Table, user string, role string, groups map[string]*metabase.Group) error {
	ret := _m.Called(resource, user, role, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metabase.Table, string, string, map[string]*metabase.Group) error); ok {
		r0 = rf(resource, user, role, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_GrantTableAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantTableAccess'
type MetabaseClient_GrantTableAccess_Call struct {
	*mock.Call
}

// GrantTableAccess is a helper method to define mock.On call
//   - resource *metabase.Table
//   - user string
//   - role string
//   - groups map[string]*metabase.Group
func (_e *MetabaseClient_Expecter) GrantTableAccess(resource interface{}, user interface{}, role interface{}, groups interface{}) *MetabaseClient_GrantTableAccess_Call {
	return &MetabaseClient_GrantTableAccess_Call{Call: _e.mock.On("GrantTableAccess", resource, user, role, groups)}
}

func (_c *MetabaseClient_GrantTableAccess_Call) Run(run func(resource *metabase.Table, user string, role string, groups map[string]*metabase.Group)) *MetabaseClient_GrantTableAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metabase.Table), args[1].(string), args[2].(string), args[3].(map[string]*metabase.Group))
	})
	return _c
}

func (_c *MetabaseClient_GrantTableAccess_Call) Return(_a0 error) *MetabaseClient_GrantTableAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_GrantTableAccess_Call) RunAndReturn(run func(*metabase.Table, string, string, map[string]*metabase.Group) error) *MetabaseClient_GrantTableAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeCollectionAccess provides a mock function with given fields: resource, user, role
func (_m *MetabaseClient) RevokeCollectionAccess(resource *metabase.Collection, user string, role string) error {
	ret := _m.Called(resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metabase.Collection, string, string) error); ok {
		r0 = rf(resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_RevokeCollectionAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeCollectionAccess'
type MetabaseClient_RevokeCollectionAccess_Call struct {
	*mock.Call
}

// RevokeCollectionAccess is a helper method to define mock.On call
//   - resource *metabase.Collection
//   - user string
//   - role string
func (_e *MetabaseClient_Expecter) RevokeCollectionAccess(resource interface{}, user interface{}, role interface{}) *MetabaseClient_RevokeCollectionAccess_Call {
	return &MetabaseClient_RevokeCollectionAccess_Call{Call: _e.mock.On("RevokeCollectionAccess", resource, user, role)}
}

func (_c *MetabaseClient_RevokeCollectionAccess_Call) Run(run func(resource *metabase.Collection, user string, role string)) *MetabaseClient_RevokeCollectionAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metabase.Collection), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MetabaseClient_RevokeCollectionAccess_Call) Return(_a0 error) *MetabaseClient_RevokeCollectionAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_RevokeCollectionAccess_Call) RunAndReturn(run func(*metabase.Collection, string, string) error) *MetabaseClient_RevokeCollectionAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeDatabaseAccess provides a mock function with given fields: resource, user, role
func (_m *MetabaseClient) RevokeDatabaseAccess(resource *metabase.Database, user string, role string) error {
	ret := _m.Called(resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metabase.Database, string, string) error); ok {
		r0 = rf(resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_RevokeDatabaseAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeDatabaseAccess'
type MetabaseClient_RevokeDatabaseAccess_Call struct {
	*mock.Call
}

// RevokeDatabaseAccess is a helper method to define mock.On call
//   - resource *metabase.Database
//   - user string
//   - role string
func (_e *MetabaseClient_Expecter) RevokeDatabaseAccess(resource interface{}, user interface{}, role interface{}) *MetabaseClient_RevokeDatabaseAccess_Call {
	return &MetabaseClient_RevokeDatabaseAccess_Call{Call: _e.mock.On("RevokeDatabaseAccess", resource, user, role)}
}

func (_c *MetabaseClient_RevokeDatabaseAccess_Call) Run(run func(resource *metabase.Database, user string, role string)) *MetabaseClient_RevokeDatabaseAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metabase.Database), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MetabaseClient_RevokeDatabaseAccess_Call) Return(_a0 error) *MetabaseClient_RevokeDatabaseAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_RevokeDatabaseAccess_Call) RunAndReturn(run func(*metabase.Database, string, string) error) *MetabaseClient_RevokeDatabaseAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeGroupAccess provides a mock function with given fields: groupID, email
func (_m *MetabaseClient) RevokeGroupAccess(groupID int, email string) error {
	ret := _m.Called(groupID, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(groupID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_RevokeGroupAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeGroupAccess'
type MetabaseClient_RevokeGroupAccess_Call struct {
	*mock.Call
}

// RevokeGroupAccess is a helper method to define mock.On call
//   - groupID int
//   - email string
func (_e *MetabaseClient_Expecter) RevokeGroupAccess(groupID interface{}, email interface{}) *MetabaseClient_RevokeGroupAccess_Call {
	return &MetabaseClient_RevokeGroupAccess_Call{Call: _e.mock.On("RevokeGroupAccess", groupID, email)}
}

func (_c *MetabaseClient_RevokeGroupAccess_Call) Run(run func(groupID int, email string)) *MetabaseClient_RevokeGroupAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MetabaseClient_RevokeGroupAccess_Call) Return(_a0 error) *MetabaseClient_RevokeGroupAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_RevokeGroupAccess_Call) RunAndReturn(run func(int, string) error) *MetabaseClient_RevokeGroupAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeTableAccess provides a mock function with given fields: resource, user, role
func (_m *MetabaseClient) RevokeTableAccess(resource *metabase.Table, user string, role string) error {
	ret := _m.Called(resource, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metabase.Table, string, string) error); ok {
		r0 = rf(resource, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetabaseClient_RevokeTableAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeTableAccess'
type MetabaseClient_RevokeTableAccess_Call struct {
	*mock.Call
}

// RevokeTableAccess is a helper method to define mock.On call
//   - resource *metabase.Table
//   - user string
//   - role string
func (_e *MetabaseClient_Expecter) RevokeTableAccess(resource interface{}, user interface{}, role interface{}) *MetabaseClient_RevokeTableAccess_Call {
	return &MetabaseClient_RevokeTableAccess_Call{Call: _e.mock.On("RevokeTableAccess", resource, user, role)}
}

func (_c *MetabaseClient_RevokeTableAccess_Call) Run(run func(resource *metabase.Table, user string, role string)) *MetabaseClient_RevokeTableAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*metabase.Table), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MetabaseClient_RevokeTableAccess_Call) Return(_a0 error) *MetabaseClient_RevokeTableAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetabaseClient_RevokeTableAccess_Call) RunAndReturn(run func(*metabase.Table, string, string) error) *MetabaseClient_RevokeTableAccess_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMetabaseClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetabaseClient creates a new instance of MetabaseClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetabaseClient(t mockConstructorTestingTNewMetabaseClient) *MetabaseClient {
	mock := &MetabaseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
