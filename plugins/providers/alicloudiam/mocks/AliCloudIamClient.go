// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	client "github.com/alibabacloud-go/ram-20150501/v2/client"
	context "golang.org/x/net/context"

	domain "github.com/goto/guardian/domain"

	mock "github.com/stretchr/testify/mock"
)

// AliCloudIamClient is an autogenerated mock type for the AliCloudIamClient type
type AliCloudIamClient struct {
	mock.Mock
}

type AliCloudIamClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AliCloudIamClient) EXPECT() *AliCloudIamClient_Expecter {
	return &AliCloudIamClient_Expecter{mock: &_m.Mock}
}

// GetAllPoliciesByType provides a mock function with given fields: _a0, policyType, maxItems
func (_m *AliCloudIamClient) GetAllPoliciesByType(_a0 context.Context, policyType string, maxItems int32) ([]*client.ListPoliciesResponseBodyPoliciesPolicy, error) {
	ret := _m.Called(_a0, policyType, maxItems)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPoliciesByType")
	}

	var r0 []*client.ListPoliciesResponseBodyPoliciesPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) ([]*client.ListPoliciesResponseBodyPoliciesPolicy, error)); ok {
		return rf(_a0, policyType, maxItems)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) []*client.ListPoliciesResponseBodyPoliciesPolicy); ok {
		r0 = rf(_a0, policyType, maxItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.ListPoliciesResponseBodyPoliciesPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(_a0, policyType, maxItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AliCloudIamClient_GetAllPoliciesByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPoliciesByType'
type AliCloudIamClient_GetAllPoliciesByType_Call struct {
	*mock.Call
}

// GetAllPoliciesByType is a helper method to define mock.On call
//   - _a0 context.Context
//   - policyType string
//   - maxItems int32
func (_e *AliCloudIamClient_Expecter) GetAllPoliciesByType(_a0 interface{}, policyType interface{}, maxItems interface{}) *AliCloudIamClient_GetAllPoliciesByType_Call {
	return &AliCloudIamClient_GetAllPoliciesByType_Call{Call: _e.mock.On("GetAllPoliciesByType", _a0, policyType, maxItems)}
}

func (_c *AliCloudIamClient_GetAllPoliciesByType_Call) Run(run func(_a0 context.Context, policyType string, maxItems int32)) *AliCloudIamClient_GetAllPoliciesByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32))
	})
	return _c
}

func (_c *AliCloudIamClient_GetAllPoliciesByType_Call) Return(_a0 []*client.ListPoliciesResponseBodyPoliciesPolicy, _a1 error) *AliCloudIamClient_GetAllPoliciesByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AliCloudIamClient_GetAllPoliciesByType_Call) RunAndReturn(run func(context.Context, string, int32) ([]*client.ListPoliciesResponseBodyPoliciesPolicy, error)) *AliCloudIamClient_GetAllPoliciesByType_Call {
	_c.Call.Return(run)
	return _c
}

// GrantAccess provides a mock function with given fields: ctx, policyName, policyType, username
func (_m *AliCloudIamClient) GrantAccess(ctx context.Context, policyName string, policyType string, username string) error {
	ret := _m.Called(ctx, policyName, policyType, username)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, policyName, policyType, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AliCloudIamClient_GrantAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantAccess'
type AliCloudIamClient_GrantAccess_Call struct {
	*mock.Call
}

// GrantAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - policyType string
//   - username string
func (_e *AliCloudIamClient_Expecter) GrantAccess(ctx interface{}, policyName interface{}, policyType interface{}, username interface{}) *AliCloudIamClient_GrantAccess_Call {
	return &AliCloudIamClient_GrantAccess_Call{Call: _e.mock.On("GrantAccess", ctx, policyName, policyType, username)}
}

func (_c *AliCloudIamClient_GrantAccess_Call) Run(run func(ctx context.Context, policyName string, policyType string, username string)) *AliCloudIamClient_GrantAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AliCloudIamClient_GrantAccess_Call) Return(_a0 error) *AliCloudIamClient_GrantAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AliCloudIamClient_GrantAccess_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AliCloudIamClient_GrantAccess_Call {
	_c.Call.Return(run)
	return _c
}

// GrantAccessToRole provides a mock function with given fields: ctx, policyName, policyType, roleName
func (_m *AliCloudIamClient) GrantAccessToRole(ctx context.Context, policyName string, policyType string, roleName string) error {
	ret := _m.Called(ctx, policyName, policyType, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccessToRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, policyName, policyType, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AliCloudIamClient_GrantAccessToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantAccessToRole'
type AliCloudIamClient_GrantAccessToRole_Call struct {
	*mock.Call
}

// GrantAccessToRole is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - policyType string
//   - roleName string
func (_e *AliCloudIamClient_Expecter) GrantAccessToRole(ctx interface{}, policyName interface{}, policyType interface{}, roleName interface{}) *AliCloudIamClient_GrantAccessToRole_Call {
	return &AliCloudIamClient_GrantAccessToRole_Call{Call: _e.mock.On("GrantAccessToRole", ctx, policyName, policyType, roleName)}
}

func (_c *AliCloudIamClient_GrantAccessToRole_Call) Run(run func(ctx context.Context, policyName string, policyType string, roleName string)) *AliCloudIamClient_GrantAccessToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AliCloudIamClient_GrantAccessToRole_Call) Return(_a0 error) *AliCloudIamClient_GrantAccessToRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AliCloudIamClient_GrantAccessToRole_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AliCloudIamClient_GrantAccessToRole_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccess provides a mock function with given fields: ctx, pc, resources
func (_m *AliCloudIamClient) ListAccess(ctx context.Context, pc domain.ProviderConfig, resources []*domain.Resource) (domain.MapResourceAccess, error) {
	ret := _m.Called(ctx, pc, resources)

	if len(ret) == 0 {
		panic("no return value specified for ListAccess")
	}

	var r0 domain.MapResourceAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProviderConfig, []*domain.Resource) (domain.MapResourceAccess, error)); ok {
		return rf(ctx, pc, resources)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProviderConfig, []*domain.Resource) domain.MapResourceAccess); ok {
		r0 = rf(ctx, pc, resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MapResourceAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProviderConfig, []*domain.Resource) error); ok {
		r1 = rf(ctx, pc, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AliCloudIamClient_ListAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccess'
type AliCloudIamClient_ListAccess_Call struct {
	*mock.Call
}

// ListAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - pc domain.ProviderConfig
//   - resources []*domain.Resource
func (_e *AliCloudIamClient_Expecter) ListAccess(ctx interface{}, pc interface{}, resources interface{}) *AliCloudIamClient_ListAccess_Call {
	return &AliCloudIamClient_ListAccess_Call{Call: _e.mock.On("ListAccess", ctx, pc, resources)}
}

func (_c *AliCloudIamClient_ListAccess_Call) Run(run func(ctx context.Context, pc domain.ProviderConfig, resources []*domain.Resource)) *AliCloudIamClient_ListAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProviderConfig), args[2].([]*domain.Resource))
	})
	return _c
}

func (_c *AliCloudIamClient_ListAccess_Call) Return(_a0 domain.MapResourceAccess, _a1 error) *AliCloudIamClient_ListAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AliCloudIamClient_ListAccess_Call) RunAndReturn(run func(context.Context, domain.ProviderConfig, []*domain.Resource) (domain.MapResourceAccess, error)) *AliCloudIamClient_ListAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccess provides a mock function with given fields: ctx, policyName, policyType, username
func (_m *AliCloudIamClient) RevokeAccess(ctx context.Context, policyName string, policyType string, username string) error {
	ret := _m.Called(ctx, policyName, policyType, username)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, policyName, policyType, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AliCloudIamClient_RevokeAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccess'
type AliCloudIamClient_RevokeAccess_Call struct {
	*mock.Call
}

// RevokeAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - policyType string
//   - username string
func (_e *AliCloudIamClient_Expecter) RevokeAccess(ctx interface{}, policyName interface{}, policyType interface{}, username interface{}) *AliCloudIamClient_RevokeAccess_Call {
	return &AliCloudIamClient_RevokeAccess_Call{Call: _e.mock.On("RevokeAccess", ctx, policyName, policyType, username)}
}

func (_c *AliCloudIamClient_RevokeAccess_Call) Run(run func(ctx context.Context, policyName string, policyType string, username string)) *AliCloudIamClient_RevokeAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AliCloudIamClient_RevokeAccess_Call) Return(_a0 error) *AliCloudIamClient_RevokeAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AliCloudIamClient_RevokeAccess_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AliCloudIamClient_RevokeAccess_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccessFromRole provides a mock function with given fields: ctx, policyName, policyType, roleName
func (_m *AliCloudIamClient) RevokeAccessFromRole(ctx context.Context, policyName string, policyType string, roleName string) error {
	ret := _m.Called(ctx, policyName, policyType, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccessFromRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, policyName, policyType, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AliCloudIamClient_RevokeAccessFromRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccessFromRole'
type AliCloudIamClient_RevokeAccessFromRole_Call struct {
	*mock.Call
}

// RevokeAccessFromRole is a helper method to define mock.On call
//   - ctx context.Context
//   - policyName string
//   - policyType string
//   - roleName string
func (_e *AliCloudIamClient_Expecter) RevokeAccessFromRole(ctx interface{}, policyName interface{}, policyType interface{}, roleName interface{}) *AliCloudIamClient_RevokeAccessFromRole_Call {
	return &AliCloudIamClient_RevokeAccessFromRole_Call{Call: _e.mock.On("RevokeAccessFromRole", ctx, policyName, policyType, roleName)}
}

func (_c *AliCloudIamClient_RevokeAccessFromRole_Call) Run(run func(ctx context.Context, policyName string, policyType string, roleName string)) *AliCloudIamClient_RevokeAccessFromRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AliCloudIamClient_RevokeAccessFromRole_Call) Return(_a0 error) *AliCloudIamClient_RevokeAccessFromRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AliCloudIamClient_RevokeAccessFromRole_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AliCloudIamClient_RevokeAccessFromRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewAliCloudIamClient creates a new instance of AliCloudIamClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAliCloudIamClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AliCloudIamClient {
	mock := &AliCloudIamClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
