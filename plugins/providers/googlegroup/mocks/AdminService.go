// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
    context "context"

    mock "github.com/stretchr/testify/mock"
    admin "google.golang.org/api/admin/directory/v1"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
    mock.Mock
}

type AdminService_Expecter struct {
    mock *mock.Mock
}

func (_m *AdminService) EXPECT() *AdminService_Expecter {
    return &AdminService_Expecter{mock: &_m.Mock}
}

// InsertMember provides a mock function with given fields: ctx, groupKey, member
func (_m *AdminService) InsertMember(ctx context.Context, groupKey string, member *admin.Member) (*admin.Member, error) {
    ret := _m.Called(ctx, groupKey, member)

    var r0 *admin.Member
    var r1 error
    if rf, ok := ret.Get(0).(func(context.Context, string, *admin.Member) (*admin.Member, error)); ok {
        return rf(ctx, groupKey, member)
    }
    if rf, ok := ret.Get(0).(func(context.Context, string, *admin.Member) *admin.Member); ok {
        r0 = rf(ctx, groupKey, member)
    } else {
        if ret.Get(0) != nil {
            r0 = ret.Get(0).(*admin.Member)
        }
    }

    if rf, ok := ret.Get(1).(func(context.Context, string, *admin.Member) error); ok {
        r1 = rf(ctx, groupKey, member)
    } else {
        r1 = ret.Error(1)
    }

    return r0, r1
}

// AdminService_InsertMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMember'
type AdminService_InsertMember_Call struct {
    *mock.Call
}

// InsertMember is a helper method to define mock.On call
func (_e *AdminService_Expecter) InsertMember(ctx interface{}, groupKey interface{}, member interface{}) *AdminService_InsertMember_Call {
    return &AdminService_InsertMember_Call{Call: _e.mock.On("InsertMember", ctx, groupKey, member)}
}

func (_c *AdminService_InsertMember_Call) Run(run func(ctx context.Context, groupKey string, member *admin.Member)) *AdminService_InsertMember_Call {
    _c.Call.Run(func(args mock.Arguments) {
        run(args[0].(context.Context), args[1].(string), args[2].(*admin.Member))
    })
    return _c
}

func (_c *AdminService_InsertMember_Call) Return(member *admin.Member, err error) *AdminService_InsertMember_Call {
    _c.Call.Return(member, err)
    return _c
}

func (_c *AdminService_InsertMember_Call) RunAndReturn(run func(context.Context, string, *admin.Member) (*admin.Member, error)) *AdminService_InsertMember_Call {
    _c.Call.Return(run)
    return _c
}

// ListGroups provides a mock function with given fields: ctx, customer, pageToken
func (_m *AdminService) ListGroups(ctx context.Context, customer string, pageToken string) ([]*admin.Group, string, error) {
    ret := _m.Called(ctx, customer, pageToken)

    var r0 []*admin.Group
    var r1 string
    var r2 error
    if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*admin.Group, string, error)); ok {
        return rf(ctx, customer, pageToken)
    }
    if rf, ok := ret.Get(0).(func(context.Context, string, string) []*admin.Group); ok {
        r0 = rf(ctx, customer, pageToken)
    } else {
        if ret.Get(0) != nil {
            r0 = ret.Get(0).([]*admin.Group)
        }
    }

    if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
        r1 = rf(ctx, customer, pageToken)
    } else {
        r1 = ret.Get(1).(string)
    }

    if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
        r2 = rf(ctx, customer, pageToken)
    } else {
        r2 = ret.Error(2)
    }

    return r0, r1, r2
}

// AdminService_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type AdminService_ListGroups_Call struct {
    *mock.Call
}

// ListGroups is a helper method to define mock.On call
func (_e *AdminService_Expecter) ListGroups(ctx interface{}, customer interface{}, pageToken interface{}) *AdminService_ListGroups_Call {
    return &AdminService_ListGroups_Call{Call: _e.mock.On("ListGroups", ctx, customer, pageToken)}
}

func (_c *AdminService_ListGroups_Call) Run(run func(ctx context.Context, customer string, pageToken string)) *AdminService_ListGroups_Call {
    _c.Call.Run(func(args mock.Arguments) {
        run(args[0].(context.Context), args[1].(string), args[2].(string))
    })
    return _c
}

func (_c *AdminService_ListGroups_Call) Return(groups []*admin.Group, nextPageToken string, err error) *AdminService_ListGroups_Call {
    _c.Call.Return(groups, nextPageToken, err)
    return _c
}

func (_c *AdminService_ListGroups_Call) RunAndReturn(run func(context.Context, string, string) ([]*admin.Group, string, error)) *AdminService_ListGroups_Call {
    _c.Call.Return(run)
    return _c
}

// RemoveMember provides a mock function with given fields: ctx, groupKey, memberKey
func (_m *AdminService) RemoveMember(ctx context.Context, groupKey string, memberKey string) error {
    ret := _m.Called(ctx, groupKey, memberKey)

    var r0 error
    if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
        r0 = rf(ctx, groupKey, memberKey)
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// AdminService_RemoveMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMember'
type AdminService_RemoveMember_Call struct {
    *mock.Call
}

// RemoveMember is a helper method to define mock.On call
func (_e *AdminService_Expecter) RemoveMember(ctx interface{}, groupKey interface{}, memberKey interface{}) *AdminService_RemoveMember_Call {
    return &AdminService_RemoveMember_Call{Call: _e.mock.On("RemoveMember", ctx, groupKey, memberKey)}
}

func (_c *AdminService_RemoveMember_Call) Run(run func(ctx context.Context, groupKey string, memberKey string)) *AdminService_RemoveMember_Call {
    _c.Call.Run(func(args mock.Arguments) {
        run(args[0].(context.Context), args[1].(string), args[2].(string))
    })
    return _c
}

func (_c *AdminService_RemoveMember_Call) Return(err error) *AdminService_RemoveMember_Call {
    _c.Call.Return(err)
    return _c
}

func (_c *AdminService_RemoveMember_Call) RunAndReturn(run func(context.Context, string, string) error) *AdminService_RemoveMember_Call {
    _c.Call.Return(run)
    return _c
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminService(t interface {
    mock.TestingT
    Cleanup(func())
}) *AdminService {
    mock := &AdminService{}
    mock.Mock.Test(t)

    t.Cleanup(func() { mock.AssertExpectations(t) })

    return mock
}