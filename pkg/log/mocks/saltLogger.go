// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// SaltLogger is an autogenerated mock type for the saltLogger type
type SaltLogger struct {
	mock.Mock
}

type SaltLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *SaltLogger) EXPECT() *SaltLogger_Expecter {
	return &SaltLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, args
func (_m *SaltLogger) Debug(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SaltLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type SaltLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *SaltLogger_Expecter) Debug(msg interface{}, args ...interface{}) *SaltLogger_Debug_Call {
	return &SaltLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, args...)...)}
}

func (_c *SaltLogger_Debug_Call) Run(run func(msg string, args ...interface{})) *SaltLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SaltLogger_Debug_Call) Return() *SaltLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *SaltLogger_Debug_Call) RunAndReturn(run func(string, ...interface{})) *SaltLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, args
func (_m *SaltLogger) Error(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SaltLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type SaltLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *SaltLogger_Expecter) Error(msg interface{}, args ...interface{}) *SaltLogger_Error_Call {
	return &SaltLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, args...)...)}
}

func (_c *SaltLogger_Error_Call) Run(run func(msg string, args ...interface{})) *SaltLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SaltLogger_Error_Call) Return() *SaltLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *SaltLogger_Error_Call) RunAndReturn(run func(string, ...interface{})) *SaltLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: msg, args
func (_m *SaltLogger) Fatal(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SaltLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type SaltLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *SaltLogger_Expecter) Fatal(msg interface{}, args ...interface{}) *SaltLogger_Fatal_Call {
	return &SaltLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{msg}, args...)...)}
}

func (_c *SaltLogger_Fatal_Call) Run(run func(msg string, args ...interface{})) *SaltLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SaltLogger_Fatal_Call) Return() *SaltLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *SaltLogger_Fatal_Call) RunAndReturn(run func(string, ...interface{})) *SaltLogger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, args
func (_m *SaltLogger) Info(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SaltLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type SaltLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *SaltLogger_Expecter) Info(msg interface{}, args ...interface{}) *SaltLogger_Info_Call {
	return &SaltLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, args...)...)}
}

func (_c *SaltLogger_Info_Call) Run(run func(msg string, args ...interface{})) *SaltLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SaltLogger_Info_Call) Return() *SaltLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *SaltLogger_Info_Call) RunAndReturn(run func(string, ...interface{})) *SaltLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Level provides a mock function with given fields:
func (_m *SaltLogger) Level() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SaltLogger_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type SaltLogger_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *SaltLogger_Expecter) Level() *SaltLogger_Level_Call {
	return &SaltLogger_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *SaltLogger_Level_Call) Run(run func()) *SaltLogger_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SaltLogger_Level_Call) Return(_a0 string) *SaltLogger_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SaltLogger_Level_Call) RunAndReturn(run func() string) *SaltLogger_Level_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, args
func (_m *SaltLogger) Warn(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SaltLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type SaltLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *SaltLogger_Expecter) Warn(msg interface{}, args ...interface{}) *SaltLogger_Warn_Call {
	return &SaltLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, args...)...)}
}

func (_c *SaltLogger_Warn_Call) Run(run func(msg string, args ...interface{})) *SaltLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SaltLogger_Warn_Call) Return() *SaltLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *SaltLogger_Warn_Call) RunAndReturn(run func(string, ...interface{})) *SaltLogger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// Writer provides a mock function with given fields:
func (_m *SaltLogger) Writer() io.Writer {
	ret := _m.Called()

	var r0 io.Writer
	if rf, ok := ret.Get(0).(func() io.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}

	return r0
}

// SaltLogger_Writer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Writer'
type SaltLogger_Writer_Call struct {
	*mock.Call
}

// Writer is a helper method to define mock.On call
func (_e *SaltLogger_Expecter) Writer() *SaltLogger_Writer_Call {
	return &SaltLogger_Writer_Call{Call: _e.mock.On("Writer")}
}

func (_c *SaltLogger_Writer_Call) Run(run func()) *SaltLogger_Writer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SaltLogger_Writer_Call) Return(_a0 io.Writer) *SaltLogger_Writer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SaltLogger_Writer_Call) RunAndReturn(run func() io.Writer) *SaltLogger_Writer_Call {
	_c.Call.Return(run)
	return _c
}

// NewSaltLogger creates a new instance of SaltLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSaltLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *SaltLogger {
	mock := &SaltLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
